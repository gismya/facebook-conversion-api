/*
 * Facebook Conversions API (for Web)
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: web_signals_integrations@fb.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FacebookConversionsApiForWeb);
  }
}(this, function(expect, FacebookConversionsApiForWeb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Event', function() {
      beforeEach(function() {
        instance = new FacebookConversionsApiForWeb.Event();
      });

      it('should create an instance of Event', function() {
        // TODO: update the code to test Event
        expect(instance).to.be.a(FacebookConversionsApiForWeb.Event);
      });

      it('should have the property eventName (base name: "event_name")', function() {
        // TODO: update the code to test the property eventName
        expect(instance).to.have.property('eventName');
        // expect(instance.eventName).to.be(expectedValueLiteral);
      });

      it('should have the property eventTime (base name: "event_time")', function() {
        // TODO: update the code to test the property eventTime
        expect(instance).to.have.property('eventTime');
        // expect(instance.eventTime).to.be(expectedValueLiteral);
      });

      it('should have the property eventSourceUrl (base name: "event_source_url")', function() {
        // TODO: update the code to test the property eventSourceUrl
        expect(instance).to.have.property('eventSourceUrl');
        // expect(instance.eventSourceUrl).to.be(expectedValueLiteral);
      });

      it('should have the property optOut (base name: "opt_out")', function() {
        // TODO: update the code to test the property optOut
        expect(instance).to.have.property('optOut');
        // expect(instance.optOut).to.be(expectedValueLiteral);
      });

      it('should have the property eventId (base name: "event_id")', function() {
        // TODO: update the code to test the property eventId
        expect(instance).to.have.property('eventId');
        // expect(instance.eventId).to.be(expectedValueLiteral);
      });

      it('should have the property actionSource (base name: "action_source")', function() {
        // TODO: update the code to test the property actionSource
        expect(instance).to.have.property('actionSource');
        // expect(instance.actionSource).to.be(expectedValueLiteral);
      });

      it('should have the property userData (base name: "user_data")', function() {
        // TODO: update the code to test the property userData
        expect(instance).to.have.property('userData');
        // expect(instance.userData).to.be(expectedValueLiteral);
      });

      it('should have the property customData (base name: "custom_data")', function() {
        // TODO: update the code to test the property customData
        expect(instance).to.have.property('customData');
        // expect(instance.customData).to.be(expectedValueLiteral);
      });

      it('should have the property dataProcessingOptions (base name: "data_processing_options")', function() {
        // TODO: update the code to test the property dataProcessingOptions
        expect(instance).to.have.property('dataProcessingOptions');
        // expect(instance.dataProcessingOptions).to.be(expectedValueLiteral);
      });

      it('should have the property dataProcessingOptionsCountry (base name: "data_processing_options_country")', function() {
        // TODO: update the code to test the property dataProcessingOptionsCountry
        expect(instance).to.have.property('dataProcessingOptionsCountry');
        // expect(instance.dataProcessingOptionsCountry).to.be(expectedValueLiteral);
      });

      it('should have the property dataProcessingOptionsState (base name: "data_processing_options_state")', function() {
        // TODO: update the code to test the property dataProcessingOptionsState
        expect(instance).to.have.property('dataProcessingOptionsState');
        // expect(instance.dataProcessingOptionsState).to.be(expectedValueLiteral);
      });

    });
  });

}));
