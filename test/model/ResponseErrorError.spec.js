/*
 * Facebook Conversions API (for Web)
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: web_signals_integrations@fb.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FacebookConversionsApiForWeb);
  }
}(this, function(expect, FacebookConversionsApiForWeb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ResponseErrorError', function() {
      beforeEach(function() {
        instance = new FacebookConversionsApiForWeb.ResponseErrorError();
      });

      it('should create an instance of ResponseErrorError', function() {
        // TODO: update the code to test ResponseErrorError
        expect(instance).to.be.a(FacebookConversionsApiForWeb.ResponseErrorError);
      });

      it('should have the property code (base name: "code")', function() {
        // TODO: update the code to test the property code
        expect(instance).to.have.property('code');
        // expect(instance.code).to.be(expectedValueLiteral);
      });

      it('should have the property messages (base name: "messages")', function() {
        // TODO: update the code to test the property messages
        expect(instance).to.have.property('messages');
        // expect(instance.messages).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property fbtraceId (base name: "fbtrace_id")', function() {
        // TODO: update the code to test the property fbtraceId
        expect(instance).to.have.property('fbtraceId');
        // expect(instance.fbtraceId).to.be(expectedValueLiteral);
      });

      it('should have the property errorSubcode (base name: "error_subcode")', function() {
        // TODO: update the code to test the property errorSubcode
        expect(instance).to.have.property('errorSubcode');
        // expect(instance.errorSubcode).to.be(expectedValueLiteral);
      });

      it('should have the property isTransient (base name: "is_transient")', function() {
        // TODO: update the code to test the property isTransient
        expect(instance).to.have.property('isTransient');
        // expect(instance.isTransient).to.be(expectedValueLiteral);
      });

      it('should have the property errorUserTitle (base name: "error_user_title")', function() {
        // TODO: update the code to test the property errorUserTitle
        expect(instance).to.have.property('errorUserTitle');
        // expect(instance.errorUserTitle).to.be(expectedValueLiteral);
      });

      it('should have the property errorUserMsg (base name: "error_user_msg")', function() {
        // TODO: update the code to test the property errorUserMsg
        expect(instance).to.have.property('errorUserMsg');
        // expect(instance.errorUserMsg).to.be(expectedValueLiteral);
      });

    });
  });

}));
