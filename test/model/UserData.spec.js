/*
 * Facebook Conversions API (for Web)
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: web_signals_integrations@fb.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FacebookConversionsApiForWeb);
  }
}(this, function(expect, FacebookConversionsApiForWeb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UserData', function() {
      beforeEach(function() {
        instance = new FacebookConversionsApiForWeb.UserData();
      });

      it('should create an instance of UserData', function() {
        // TODO: update the code to test UserData
        expect(instance).to.be.a(FacebookConversionsApiForWeb.UserData);
      });

      it('should have the property em (base name: "em")', function() {
        // TODO: update the code to test the property em
        expect(instance).to.have.property('em');
        // expect(instance.em).to.be(expectedValueLiteral);
      });

      it('should have the property ph (base name: "ph")', function() {
        // TODO: update the code to test the property ph
        expect(instance).to.have.property('ph');
        // expect(instance.ph).to.be(expectedValueLiteral);
      });

      it('should have the property ge (base name: "ge")', function() {
        // TODO: update the code to test the property ge
        expect(instance).to.have.property('ge');
        // expect(instance.ge).to.be(expectedValueLiteral);
      });

      it('should have the property db (base name: "db")', function() {
        // TODO: update the code to test the property db
        expect(instance).to.have.property('db');
        // expect(instance.db).to.be(expectedValueLiteral);
      });

      it('should have the property ln (base name: "ln")', function() {
        // TODO: update the code to test the property ln
        expect(instance).to.have.property('ln');
        // expect(instance.ln).to.be(expectedValueLiteral);
      });

      it('should have the property fn (base name: "fn")', function() {
        // TODO: update the code to test the property fn
        expect(instance).to.have.property('fn');
        // expect(instance.fn).to.be(expectedValueLiteral);
      });

      it('should have the property ct (base name: "ct")', function() {
        // TODO: update the code to test the property ct
        expect(instance).to.have.property('ct');
        // expect(instance.ct).to.be(expectedValueLiteral);
      });

      it('should have the property country (base name: "country")', function() {
        // TODO: update the code to test the property country
        expect(instance).to.have.property('country');
        // expect(instance.country).to.be(expectedValueLiteral);
      });

      it('should have the property st (base name: "st")', function() {
        // TODO: update the code to test the property st
        expect(instance).to.have.property('st');
        // expect(instance.st).to.be(expectedValueLiteral);
      });

      it('should have the property zp (base name: "zp")', function() {
        // TODO: update the code to test the property zp
        expect(instance).to.have.property('zp');
        // expect(instance.zp).to.be(expectedValueLiteral);
      });

      it('should have the property externalId (base name: "external_id")', function() {
        // TODO: update the code to test the property externalId
        expect(instance).to.have.property('externalId');
        // expect(instance.externalId).to.be(expectedValueLiteral);
      });

      it('should have the property clientIpAddress (base name: "client_ip_address")', function() {
        // TODO: update the code to test the property clientIpAddress
        expect(instance).to.have.property('clientIpAddress');
        // expect(instance.clientIpAddress).to.be(expectedValueLiteral);
      });

      it('should have the property clientUserAgent (base name: "client_user_agent")', function() {
        // TODO: update the code to test the property clientUserAgent
        expect(instance).to.have.property('clientUserAgent');
        // expect(instance.clientUserAgent).to.be(expectedValueLiteral);
      });

      it('should have the property fbc (base name: "fbc")', function() {
        // TODO: update the code to test the property fbc
        expect(instance).to.have.property('fbc');
        // expect(instance.fbc).to.be(expectedValueLiteral);
      });

      it('should have the property fbp (base name: "fbp")', function() {
        // TODO: update the code to test the property fbp
        expect(instance).to.have.property('fbp');
        // expect(instance.fbp).to.be(expectedValueLiteral);
      });

      it('should have the property subscriptionId (base name: "subscription_id")', function() {
        // TODO: update the code to test the property subscriptionId
        expect(instance).to.have.property('subscriptionId');
        // expect(instance.subscriptionId).to.be(expectedValueLiteral);
      });

    });
  });

}));
