/*
 * Facebook Conversions API (for Web)
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: web_signals_integrations@fb.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.23
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FacebookConversionsApiForWeb);
  }
}(this, function(expect, FacebookConversionsApiForWeb) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CustomData', function() {
      beforeEach(function() {
        instance = new FacebookConversionsApiForWeb.CustomData();
      });

      it('should create an instance of CustomData', function() {
        // TODO: update the code to test CustomData
        expect(instance).to.be.a(FacebookConversionsApiForWeb.CustomData);
      });

      it('should have the property value (base name: "value")', function() {
        // TODO: update the code to test the property value
        expect(instance).to.have.property('value');
        // expect(instance.value).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property contentName (base name: "content_name")', function() {
        // TODO: update the code to test the property contentName
        expect(instance).to.have.property('contentName');
        // expect(instance.contentName).to.be(expectedValueLiteral);
      });

      it('should have the property contentCategory (base name: "content_category")', function() {
        // TODO: update the code to test the property contentCategory
        expect(instance).to.have.property('contentCategory');
        // expect(instance.contentCategory).to.be(expectedValueLiteral);
      });

      it('should have the property contentIds (base name: "content_ids")', function() {
        // TODO: update the code to test the property contentIds
        expect(instance).to.have.property('contentIds');
        // expect(instance.contentIds).to.be(expectedValueLiteral);
      });

      it('should have the property contents (base name: "contents")', function() {
        // TODO: update the code to test the property contents
        expect(instance).to.have.property('contents');
        // expect(instance.contents).to.be(expectedValueLiteral);
      });

      it('should have the property contentType (base name: "content_type")', function() {
        // TODO: update the code to test the property contentType
        expect(instance).to.have.property('contentType');
        // expect(instance.contentType).to.be(expectedValueLiteral);
      });

      it('should have the property orderId (base name: "order_id")', function() {
        // TODO: update the code to test the property orderId
        expect(instance).to.have.property('orderId');
        // expect(instance.orderId).to.be(expectedValueLiteral);
      });

      it('should have the property predictedLtv (base name: "predicted_ltv")', function() {
        // TODO: update the code to test the property predictedLtv
        expect(instance).to.have.property('predictedLtv');
        // expect(instance.predictedLtv).to.be(expectedValueLiteral);
      });

      it('should have the property numItems (base name: "num_items")', function() {
        // TODO: update the code to test the property numItems
        expect(instance).to.have.property('numItems');
        // expect(instance.numItems).to.be(expectedValueLiteral);
      });

      it('should have the property searchString (base name: "search_string")', function() {
        // TODO: update the code to test the property searchString
        expect(instance).to.have.property('searchString');
        // expect(instance.searchString).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

    });
  });

}));
